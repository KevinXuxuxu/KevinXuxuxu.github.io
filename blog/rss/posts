<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>fzxu.me</title><link>https://site.fzxu.me/</link><description>Hey there, I'm fzxu. I (am hoping to) write about coding, system design and all other technical stuffs that I know (or would like to explore) here. Any comments/discussions are greatly welcomed.</description><language>en</language><lastBuildDate>Sat, 14 Sep 2024 21:49:44 -0000</lastBuildDate><item><title>cosmo: 3D Graphics Engine in Terminal (Cont.)</title><link>https://site.fzxu.me/blog/post/cosmo:-3D-Graphics-Engine-in-Terminal-(Cont.)/</link><description>Tags: Computer Graphics, Ray Tracing, Rust, Terminal, Category: tech &lt;br&gt; ![cosmo_david](/static/image/cosmo_david.gif "David Head Rendered in 24FPS;;50")
&lt;!-- &lt;pre&gt;&lt;code class="cosmo-display" scene="david" stl-names="david_oriented" dimension="120,60" framerate="24" enable-aabb=true disable-shade=true&gt;loading failed, try refresh UwU&lt;/code&gt;&lt;/pre&gt; --&gt;

This is a continuation of [the previous post](/blog/post/cosmo:-3D-Graphics-Engine-in-Terminal/), where we talked about my side project [cosmo](https://github.com/KevinXuxuxu/cosmo) and partly about details to implement a basic 3D graphics engine in terminal. In this post we're going to cover the rest parts of implementing a basic PoC (*Spinning Cube‚Ñ¢*).

#### Camera

To see, is to have many light rays collected onto your retina. Here we're doing the opposite (as discussed in the [Ray Tracing](/blog/post/cosmo:-3D-Graphics-Engine-in-Terminal/#ray_tracing) section last time), determine a set of light rays going out, based on the type of camera we're using.
- Orthogonal: all light rays are parallel to each other,...</description><pubDate>Sat, 14 Sep 2024 21:49:44 -0000</pubDate><guid isPermaLink="false">cosmo:-3D-Graphics-Engine-in-Terminal-(Cont.)</guid></item><item><title>Dark Mode Support (Cont.)</title><link>https://site.fzxu.me/blog/post/Dark-Mode-Support-(Cont.)/</link><description>Tags: frontend, CSS, Javascript, Sass, Category: tech &lt;br&gt; 
My previous version of [dark mode support](/blog/post/dark_mode_support/) is not very satisfactory: the color scheme is not very crafted, refreshing page under dark mode gives a blink of light color which is annoying, and switching between two CSS files is just pure ugly. With a bit more research, I realized that the standard way of supporting multiple "themes" in frontend is usually done by switching between `data-theme` on the document, with different styles defined separately in a single CSS file[^2]. Something like this:

```css
a {
  color: #807fe2;
}
[data-theme="dark"] a {
  color: #8c8cf3;
}
```

[^2]: I also did the same for the [`pygments_style.css`](https://github.com/KevinXuxuxu/blog/blob/main/static/style/pygments_style.css) file, which is for code block syntax highlighting and also needed some adjustments for dark mode.

#### Spectre.css

The initial plan was simple: all colors are defined in `_variables.scss` file, I should find a way to assign different values to them ...</description><pubDate>Sun, 25 Aug 2024 20:32:16 -0000</pubDate><guid isPermaLink="false">Dark-Mode-Support-(Cont.)</guid></item><item><title>cosmo: 3D Graphics Engine in Terminal</title><link>https://site.fzxu.me/blog/post/cosmo:-3D-Graphics-Engine-in-Terminal/</link><description>Tags: Computer Graphics, Ray Tracing, Rust, Terminal, Category: tech &lt;br&gt; 
&lt;pre&gt;&lt;code class="cosmo-display" scene="panorama" dimension="150,30" framerate="24" enable-aabb=false disable-shade=false&gt;loading failed, try refresh UwU&lt;/code&gt;&lt;/pre&gt;

The idea came from [an amazing work](https://www.a1k0n.net/2011/07/20/donut-math.html) by [Andy Sloane](https://www.a1k0n.net/)[^1] where he wrote a compact C code (shaped like a flat donut) that renders a spinning donut in terminal. Multiple people did videos about it and it was a blast.

[^1]: He also did a lot of interesting things with 3D rendering and embedded environments, please check him out.

The thing that particularly interest me is that it should not be hard to create a 3D graphics engine in terminal. With limited resolution, performance should not be a bottleneck for doing thing the easiest way[^2]. I'm pretty confident that I can nail it with whatever I still remember from my collage class on computer graphics.

Initially I was doing it in Python, specifically Numpy for the vector math part. It didn't take...</description><pubDate>Wed, 07 Aug 2024 04:26:15 -0000</pubDate><guid isPermaLink="false">cosmo:-3D-Graphics-Engine-in-Terminal</guid></item><item><title>Self-hosting VPN</title><link>https://site.fzxu.me/blog/post/Self-hosting-VPN/</link><description>Tags: Private Cloud, VPN, V2Ray, GFW, Network, Category: tech &lt;br&gt; 
&gt; TL;DR This blog is mainly talking about self-hosting proxy to visit blocked sites and services by GFW from mainland China, **not** talking about general network proxy and VPN concept. It's also mostly focused on overall technology and server side setups. For client side, please check [footnote 3](/blog/post/Self-hosting-VPN/#fn-3) for more information.

From my earliest days in US I have had the need of a Ê¢ØÂ≠ê[^1] against the [GFW](https://en.wikipedia.org/wiki/Great_Firewall), as I started to heavily rely on blocked services like Gmail, Google Map, Github etc. With the help from my collage roommate, I set up a simple solution with [Shadowsocks](https://en.wikipedia.org/wiki/Shadowsocks) on an AWS EC2 instance and wrote quite a detailed blog about it over 9 years ago.

[^1]: "ladder" in Chinese, cryptology for VPN service against GFW.

At the moment it was very popular topic among Chinese students abroad about which provider (or Êú∫Âú∫[^2]) is the most stable and fast, or which tech and c...</description><pubDate>Sun, 21 Jul 2024 20:46:52 -0000</pubDate><guid isPermaLink="false">Self-hosting-VPN</guid></item><item><title>Building Private Cloud: Network Security with Tunneling</title><link>https://site.fzxu.me/blog/post/building_private_cloud_network_security_with_tunneling/</link><description>Tags: Private Cloud, Cloudflare, Reverse Proxy, Tunnel, Network, Category: tech &lt;br&gt; As mentioned in [a previous post](/blog/post/building_private_cloud_hosting_web_service/), I'm using Traefik to manage incoming public traffic to my private cloud. To achieve that, the public IP of my home internet will need to be exposed and it's sort of dangerous no matter how secure my system is.

To address this, a proper way is to setup a reverse proxy server in a isolated environment with a separate public IP to expose[^1], an ideal choice of such environment would be a vm from a cloud provider like AWS or Google Cloud Platform. But I'm very reluctant to do that because (as I mentioned before) the whole point of building private cloud is to get rid of the "AWS tax". 

[^1]: I've done this before when I'm working as an infra engineer for a startup, seems to be a pretty common practice.

While recently[^2] I came across [this blog](https://eevans.co/blog/garage/) which mentioned that [Cloudflare](https://www.cloudflare.com/) has a tunneling service and it's free (!). Given that I a...</description><pubDate>Sun, 19 May 2024 04:20:09 -0000</pubDate><guid isPermaLink="false">building_private_cloud_network_security_with_tunneling</guid></item><item><title>Building Private Cloud: Local Container Registry</title><link>https://site.fzxu.me/blog/post/building_private_cloud_local_container_registry/</link><description>Tags: Private Cloud, k8s, Docker, Container Registry, Category: tech &lt;br&gt; In this short post we're going to cover my experience on setting up a local container registry that runs within my cluster. This greatly helps reduce the overall ingress traffic throughout the development and maintenance of applications on the cluster, and also removed the necessity of exposing image on public registries (e.g. [Docker Hub](https://hub.docker.com/)) that force you to pay for better security.

#### Options
Our requirement is simple: we want to host a container registry on the cluster to serve docker images within our local network; we should be able to push and pull image from the registry just like we use Docker Hub; performance, scalability and security should be good enough, but with lower priority. After all light-weight and convenience are the main purposes our home cluster. After some research, I found the following potential candidates:
- [Harbor](https://goharbor.io/): Probably the most famous and trusted solution, with all the high-availability and security supp...</description><pubDate>Sun, 14 Apr 2024 04:47:45 -0000</pubDate><guid isPermaLink="false">building_private_cloud_local_container_registry</guid></item><item><title>Dark Mode Support</title><link>https://site.fzxu.me/blog/post/dark_mode_support/</link><description>Tags: frontend, CSS, Javascript, npm, Category: tech &lt;br&gt; Recently I have been doing quite some frontend development involving improvement of my [blog](https://github.com/KevinXuxuxu/blog) framework as well as some new side projects (specifically [OpenCoder](https://github.com/KevinXuxuxu/opencoder) but I'll save it for a separate post). As a system/infra engineer I have always had a mixed feeling about frontend developing: they're both fascinating and boring, both super exciting when you make it right, and mindlessly dull when you fail. So here's a short post about my recent experience with too much detail that no one wants to read about.

#### The Dark Mode üåí

I have always wanted dark mode for my site, because deep down I'm dark and evil person.

No, but seriously. I have everything in dark mode if possible and I feel like being flashbombed every time I have to open something without dark mode (like Google spreadsheet). So of course I want my own site to be more pleasant to read, at least for myself.

So a very brief intro about my blog fr...</description><pubDate>Thu, 07 Mar 2024 07:33:14 -0000</pubDate><guid isPermaLink="false">dark_mode_support</guid></item><item><title>Building Private Cloud: Storage Solution</title><link>https://site.fzxu.me/blog/post/building_private_cloud_storage_solution/</link><description>Tags: Private Cloud, k8s, Storage, NAS, NFS, Category: tech &lt;br&gt; 
In this post we're going to switch gear and talk about storage solutions, which is also an important part of any cloud deployment. We'll cover some general choices for private cloud, talk about hardware limitations in my setup, and go over a few storage solutions I attempted and either failed or succeeded.

#### General Discussions

There're a few aspect we need to consider when choosing storage solutions for a cluster. Some of them are more important and other are less based on your actual use case. The ones in *Italic* is what (I think) is more important for my setup.

- *Performance*: if the solution provide good (or at least enough) and consistent performance to file access, measured by sequential/random read/write latency/throughput. We'll cover an example of performance benchmarking later in this post. Some major aspects to consider: hardware/network performance, data locality, access pattern, etc.
- *Reliability*: the ability to withstand failure and recover. This requires the ...</description><pubDate>Sat, 24 Feb 2024 02:13:53 -0000</pubDate><guid isPermaLink="false">building_private_cloud_storage_solution</guid></item><item><title>Building Private Cloud: Local DNS</title><link>https://site.fzxu.me/blog/post/building_private_cloud_local_dns/</link><description>Tags: k8s, Private Cloud, Network, DNS, CoreDNS, Category: tech &lt;br&gt; 
In [a previous post]((/blog/post/building_private_cloud_hosting_web_service/#up_next)), I touched on this weird problem where I can't access anything hosted in my cluster from my home network, but it works perfectly from outside. It's been driving me crazy ‚Äì at one point, I even thought my whole Traefik setup was fried. (Honestly, who'd think to turn off their phone's WiFi to troubleshoot a home network problem?)

My solution uses the [CoreDNS](https://coredns.io/) service (which comes with k3s) as a local DNS server. This lets me resolve inter-cluster service names directly to my cluster IP, bypassing whatever strange routing issue was happening before. As a bonus, having a local DNS makes it super easy to set up custom domain names and TLS for internal services.

So let's get right into it.

#### CoreDNS Service

CoreDNS is an [important component](https://docs.k3s.io/networking#coredns) of the k3s network infrastructure, serving as the [cluster DNS](https://kubernetes.io/docs/conce...</description><pubDate>Sun, 11 Feb 2024 02:54:12 -0000</pubDate><guid isPermaLink="false">building_private_cloud_local_dns</guid></item><item><title>Building Private Cloud: Hosting Web Service</title><link>https://site.fzxu.me/blog/post/building_private_cloud_hosting_web_service/</link><description>Tags: k8s, Traefik, Network, Private Cloud, HTTPS, Category: tech &lt;br&gt; 
In my [previous post](/blog/post/building_private_cloud_basic_setup/), the basic setup of a private cloud with [Turing Pi 2](https://turingpi.com/) board and rpi cm4 is presented. Now we can talk about how to start using the cluster for some simple web services.

The [k3s](https://docs.k3s.io/) system is very convenient in terms of supporting systems, as it comes with pre-installed [Traefik](https://github.com/traefik/traefik) ingress controller, which will be an important part of the cluster's network management system. First let's go over how to work with Traefik in a k8s context.

#### Traefik

Traefik is a complex system with some internal structures and works with many other services. But for now we mostly care about it's role as a network proxy for our internal services. As shown in this graph I got from [Traefik docs](https://doc.traefik.io/traefik/routing/overview/), it clearly defines components corresponding to each logic abstraction related to the problem it's solving:

![t...</description><pubDate>Fri, 02 Feb 2024 05:34:15 -0000</pubDate><guid isPermaLink="false">building_private_cloud_hosting_web_service</guid></item><item><title>Building Private Cloud: Basic Setup</title><link>https://site.fzxu.me/blog/post/building_private_cloud_basic_setup/</link><description>Tags: k8s, k3s, infra, Turing Pi, Raspberry Pi, Private Cloud, Category: tech &lt;br&gt; 
As mentioned in [a previous post](/blog/post/building_private_cloud_with_turing_pi/), I have acquired enough parts that's needed for me to start working on building a private cloud (or homelab). This series of blog posts is to record my experience of building this hardware/software system, and hopefully serve as a guide or pointer to anyone trying to do similar things.

![private_cloud](/static/image/private_cloud.jpg "Finished hardware setup and deployment, only software level work left")

#### Hardware
I have to admit that I underestimated the effort that would go into preparing the hardware needed for the setup. Especially when it's your first time, and you're not sure what is needed. So here's a list of hardwares I'm currently using:

- [Turing Pi 2](https://turingpi.com/product/turing-pi-2-5/)
    - [Pico PSU](https://turingpi.com/product/pico-psu/)
- [Raspberry Pi 4 Compute module 4G lite](https://www.raspberrypi.com/products/compute-module-4/?variant=raspberry-pi-cm4004000) x3
...</description><pubDate>Mon, 29 Jan 2024 06:57:47 -0000</pubDate><guid isPermaLink="false">building_private_cloud_basic_setup</guid></item><item><title>Building Private Cloud with Turing Pi 2</title><link>https://site.fzxu.me/blog/post/building_private_cloud_with_turing_pi/</link><description>Tags: k8s, k3s, infra, Turing Pi, Raspberry Pi, Private Cloud, Category: tech &lt;br&gt; 
I was one of the backers when [Turing Pi 2](https://turingpi.com/product/turing-pi-2/) was on kickstarter, and received the stuff around April 2023. But at that time there wasn't any available [rpi cm4](https://www.raspberrypi.com/products/compute-module-4/) for me to buy, so the plan was postponed util just last Thanksgiving. I got 4 rpi cm4 4G lite version, and finally started to build a private cloud out of these.

The plan was simple, boot everything up, install some container orchestration (most likely [k3s](https://k3s.io)) and start to move my web services (probably also my GF's) to local. Just going full "self-hosted". But later I realized that there are much more details that I need to learn or deal with, including but not limited to:
- Casing and thermals. Turing Pi 2 is supposed to fit in any mini-ITX case, but I have some personal preference and also cooling is another thing to worry about.
- Supporting hardwares and compatibility. I will need additional storage (preferabl...</description><pubDate>Tue, 09 Jan 2024 18:55:48 -0000</pubDate><guid isPermaLink="false">building_private_cloud_with_turing_pi</guid></item><item><title>An Example Usage of Go Generics</title><link>https://site.fzxu.me/blog/post/An-Example-Usage-of-Go-Generics/</link><description>Tags: Go, Programing Language, Generics, Category: tech &lt;br&gt; 
I haven't talked a lot about my new job at Google since last April, but I'm working in the performance engineering team who designs, implements and monitors performance benchmarks for a relatively new database product. Last year I took on a piece of work to start refactoring our benchmark framework to reduce the complexity of the codebase and make it easier to add or modify benchmarks. I'm sort of excited about this work as it would be my first time working on a large scope production level Go codebase. Alongside other refactoring work I did, one particular work of reducing boilerplate code utilizes [Go generics](https://go.dev/doc/tutorial/generics), which is a new feature of the Go language, that I find interesting enough to write about now.

##### The Problem

Assume you want to parse a bunch of different set of configs into Go [protocol buffer](https://github.com/protocolbuffers/protobuf) objects from [prototext](https://pkg.go.dev/google.golang.org/protobuf/encoding/prototext) fi...</description><pubDate>Mon, 27 Feb 2023 06:18:14 -0000</pubDate><guid isPermaLink="false">An-Example-Usage-of-Go-Generics</guid></item><item><title>Ramp Up on NanoGPT</title><link>https://site.fzxu.me/blog/post/ramp-up-on-nanogpt/</link><description>Tags: GPT, LLM, nanoGPT, ML, AI, Category: tech &lt;br&gt; 
During Thanksgiving last year, I finally convinced myself to buy compartments (while the sales were still on) to utilize my NVIDIA RTX 3070 graphics card and assemble a new PC. I did it the first time in 2021 when I was still in Beijing, so this time it went pretty smoothly. Although the main motivation is to play PC games (Got all achievements in Elden Ring soon after :), I do hope to use the graphics card to do some deep learning experiments. So after [Andrej Karpathy](https://karpathy.ai/) released [nanoGPT](https://github.com/karpathy/nanoGPT) and the [Neural Networks: Zero to Hero](https://karpathy.ai/zero-to-hero.html) online course, I know it's a perfect project to start with.

#### Setup environment
As described in the nanoGPT README, it requires the following to be installed (not sure what the `&lt;3` means though)
- [pytorch](https://pytorch.org) &lt;3
- [numpy](https://numpy.org/install/) &lt;3
- `pip install transformers` for huggingface transformers &lt;3 (to load GPT-2 checkpoints)
...</description><pubDate>Sat, 04 Feb 2023 20:58:32 -0000</pubDate><guid isPermaLink="false">ramp-up-on-nanogpt</guid></item><item><title>Trying Codecrafters.io: Not Recommended (for now)</title><link>https://site.fzxu.me/blog/post/trying-codecrafters/</link><description>Tags: Go, Redis, RESP, Codecrafters, Category: tech &lt;br&gt; 
Recently I came upon this interesting online interactive learning program called [Codecrafters](https://codecrafters.io/), which is a series of small projects with guidance for you to learn along the way. In their own words:
&gt; Recreate Redis, Git, Docker -- with your own hands. Gain expert-level confidence by taking action and diving deep, learning from the world's best.
So I've been told. I tried to sell the idea to my manager and got quickly approved (with a bunch of valuable comments that I really appreciate), and I proceed to start the 3-day free trail, followed by a 3-month subscription for $200 (wow), with 2/3 of that covered by my company.

Well, you only get charged if you still like it _after_ the free trail, after all that's what free trail means.

So I started with [Build Redis with Go](https://app.codecrafters.io/courses/redis?fresh=false&amp;track=go) project, which seems to be their main attraction. I had to be honest that they're using some very interesting technology to in...</description><pubDate>Sat, 27 Aug 2022 13:03:08 -0000</pubDate><guid isPermaLink="false">trying-codecrafters</guid></item><item><title>Learning Programing Languages</title><link>https://site.fzxu.me/blog/post/learning-programing-languages/</link><description>Tags: Go, Programing Language, Functional Programing, Category: tech &lt;br&gt; Lately I have been looking into some of the newly created programing languages as I'm getting bored with [_the ELden Ring_](https://en.wikipedia.org/wiki/Elden_Ring) and [_Risk of Rain 2_](https://en.wikipedia.org/wiki/Risk_of_Rain_2). My interest in programing languages started a few years ago when I found [Destroy All Software](https://www.destroyallsoftware.com/screencasts) and learned more about how to design and implement a programing language and its compiler, after which I wrote some toy compilers (e.g. [mini-c-compiler](https://github.com/KevinXuxuxu/mini_c_compiler), [pineapple-py](https://github.com/KevinXuxuxu/pineapple-py)). At the time I was not able to going forward partly because I feel like I'm not understanding some important concept behind the scene. Now I want to try to approach it in some different directions.

#### Functional Programing
I was also quite fascinated by the functional programing paradigm as I was checking out [the series of screencasts about computati...</description><pubDate>Sun, 31 Jul 2022 13:59:40 -0000</pubDate><guid isPermaLink="false">learning-programing-languages</guid></item><item><title>System Design: Twitter Hashtag Popularity by Time</title><link>https://site.fzxu.me/blog/post/system-design-twitter-hashtag-popularity-by-time/</link><description>Tags: System Design, Big Data, Interview, Category: system &lt;br&gt; Yesterday I came across a quite nicely setup system design interview question while I was preparing for my upcoming interviews. So I feel like sharing it here as a good reference.

### The problem

So without further ado, here is the problem itself:

&gt; Design a Twitter hashtag popularity query system that could (1) ingest twitter data and (2) give popularity histogram when queried with a specific hashtag and a time range.

Notice that the problem description is _intentionally_ left ambiguous in multiple ways, so that the candidate (me) should start exploring different possible scenarios and discuss how they would affect the overall solution. Specifically here's some points I initially find that worth mentioning:

- How are we going to ingest Twitter data? Obviously we shouldn't have access to Twitter internal infrastructures (which would make this problem much more boring), so we have a few options:
    - (My initial assumption) We don't have any special APIs to call twitter, which mak...</description><pubDate>Fri, 31 Dec 2021 11:45:10 -0000</pubDate><guid isPermaLink="false">system-design-twitter-hashtag-popularity-by-time</guid></item><item><title>Working with ARM</title><link>https://site.fzxu.me/blog/post/working-with-arm/</link><description>Tags: Docker, Architecture, devops, Category: tech &lt;br&gt; After I got back to the States in mid November, I just couldn't wait to get myself a latest MBP, given my previous one is over 5 years old and sometimes refuses to charge. And of course, I just have to have the one with Apple M1 Pro silicon. Hence start my journey of [working with ARM](/post/working-with-arm/) began.

For those who is not familiar with computer architectures, specifically different instruction sets there is, here is a [simple explainer](https://www.section.io/engineering-education/arm-x86/):

&gt; There are two most dominant computer architectures: x86 and arm. x86 architecture is based on CISC (Complex Instruction Set Computing), whose standard is setup by AMD in 1999. x86 architecture has a huge amount of different instructions, which as a result has longer and more complex instructions, and usually has worse power efficiency. On the contrary, arm architecture is based on RISC (Reduced Instruction Set Computing) proposed by ARM (the company). It has only around 50 instr...</description><pubDate>Fri, 24 Dec 2021 11:46:00 -0000</pubDate><guid isPermaLink="false">working-with-arm</guid></item><item><title>Simple Github CI Solution</title><link>https://site.fzxu.me/blog/post/simple-github-ci-solution/</link><description>Tags: Github, CI, Docker, Category: tech &lt;br&gt; For the past few weeks I've been working on enabling CI for one of my side project ([NN](https://github.com/KevinXuxuxu/NN)). I forced myself to add some unit/e2e tests while I was developing it, and it would be nice to automatically run them thoughout the dev-integration process. This solution needs to meet a few requirements:
- Automatically run all tests when new change is pushed to Github
    - On the main branch so that we know it's not broken
    - On every comment on every PR
- Blocks PR merge when test fails (obviously)
- Easy to build (relatively), since the side project itself is not big and I have limited spare time
- Doesn't cost too much money (relatively), for similar reasons

The general idea of the solution should be pretty straightforward: when a Github event that we care about (e.g. push to a PR) happens, Github sends request that triggers our CI server to do some jobs (e.g. unit testing), and returns the job result to Github.

Of course we're familiar with the tradit...</description><pubDate>Sun, 31 Oct 2021 22:12:12 -0000</pubDate><guid isPermaLink="false">simple-github-ci-solution</guid></item><item><title>A Peek into System Security</title><link>https://site.fzxu.me/blog/post/a-peek-into-system-security/</link><description>Tags: index, infra, AWS, Monitoring, Security, Category: tech &lt;br&gt; 
This morning I got reached out by 2 tech companies: [GitGuardian](https://www.gitguardian.com/) and Slack, about a same issue related to the repository I just created: [prometheus-ecs](https://github.com/KevinXuxuxu/prometheus-ecs), which is a flattering experience. Unfortunately it's not that my repo is so good that they want to initiate business collaboration or anything, it's just that they found out one of my Slack webhook url is exposed in my (apparently public) repository, and were kind enough to warn me of it. Slack even went as far as directly revoking the exposed URL and issuing a new one.

I know it sounds like a stupid mistake that any engineer with some minimum industry experience and proper practice training shouldn't make. But here's some context: Recently I have been working on a side project about system monitoring and alerting. As I build, setup and operate a bunch of web services (for myself and my gf), I would like to be aware of their availability, even being alert...</description><pubDate>Wed, 22 Sep 2021 22:27:45 -0000</pubDate><guid isPermaLink="false">a-peek-into-system-security</guid></item></channel></rss>